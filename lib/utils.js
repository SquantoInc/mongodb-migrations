// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_COLLECTION, DEFAULT_POOL_SIZE, MongoClient, _, _buildOptions, fs, loadMigrationsFromDir, mkdirp, path, urlBuilder, validateConnSettings;

  _ = require('lodash');

  fs = require('fs');

  path = require('path');

  mkdirp = require('mkdirp');

  MongoClient = require('mongodb').MongoClient;

  urlBuilder = require('./url-builder');

  DEFAULT_POOL_SIZE = 5;

  DEFAULT_COLLECTION = '_migrations';

  exports._buildOptions = _buildOptions = function(config) {
    var options, poolSize;
    options = config.options || {};
    poolSize = config.poolSize;
    if (poolSize != null) {
      console.warn('The `poolSize` config param is deprecated.\nUse `options: { server: { poolSize: poolSize} }` instead.');
      if (_.get(options, 'server.poolSize')) {
        console.warn('The `poolSize` is overriding the `options: { server: { poolSize: poolSize} }` value.');
      }
      _.set(options, 'server.poolSize', poolSize);
    }
    if (!_.get(options, 'server.poolSize')) {
      _.set(options, 'server.poolSize', DEFAULT_POOL_SIZE);
    }
    return options;
  };

  validateConnSettings = function(config) {
    var replicaset;
    if (config.url) {
      return;
    }
    replicaset = config.replicaset;
    if (!replicaset) {
      if (!config.host) {
        throw new Error('`host` is required when `replicaset` is not set');
      }
    } else {
      if (!(_.isObject(replicaset) && !_.isArray(replicaset))) {
        throw new Error('`replicaset` is not an object');
      }
      if (!replicaset.name) {
        throw new Error('`replicaset.name` is not set');
      }
      if (!_.isArray(replicaset.members)) {
        throw new Error('`replicaset.members` is not set or is not an array');
      }
      replicaset.members.forEach(function(m) {
        if (!(m != null ? m.host : void 0)) {
          throw new Error('each of `replicaset.members` must have `host` set');
        }
      });
    }
    if (!config.db) {
      throw new Error('`db` is not set');
    }
    if (config.password && !config.user) {
      throw new Error('`password` provided but `user` is not');
    }
  };

  exports.normalizeConfig = function(config) {
    if (!(_.isObject(config) && !_.isArray(config))) {
      throw new Error('`config` is not provided or is not an object');
    }
    _.defaults(config, {
      collection: DEFAULT_COLLECTION
    });
    validateConnSettings(config);
    return config;
  };

  exports.connect = function(config, cb) {
    var options, url;
    options = _buildOptions(config);
    url = urlBuilder.buildMongoConnString(config);
    return MongoClient.connect(url, options, cb);
  };

  exports.repeatString = function(str, n) {
    return Array(n + 1).join(str);
  };

  exports.loadMigrationsFromDir = loadMigrationsFromDir = function(dir, cb) {
    return mkdirp(dir, 0x1fc, function(err) {
      if (err) {
        return cb(err);
      }
      return fs.readdir(dir, function(err, files) {
        if (err) {
          return cb(err);
        }
        files = files.map(function(f) {
          var n, ref;
          n = (ref = f.match(/^(\d+)/)) != null ? ref[1] : void 0;
          if (n) {
            n = _.parseInt(n);
          } else {
            n = null;
          }
          return {
            number: n,
            name: f
          };
        }).filter(function(f) {
          return !!f.name;
        }).sort(function(f1, f2) {
          return f1.number - f2.number;
        }).map(function(f) {
          var fileName, module;
          fileName = path.join(dir, f.name);
          if (fileName.match(/\.coffee$/)) {
            require('coffee-script/register');
          }
          module = require(fileName);
          return {
            number: f.number,
            fullName: f.name,
            id: module.id,
            module: module
          };
        });
        return cb(null, files);
      });
    });
  };

  exports.slugify = function(s) {
    return (s || '').toLowerCase().replace(/\s+/, '-');
  };

  exports.writeFile = function(dir, name, body, cb) {
    var fileName;
    fileName = path.join(dir, name);
    return fs.writeFile(fileName, body, cb);
  };

  exports.loadSpecificMigrationsFromDir = function(dir, migrationIds, cb) {
    return loadMigrationsFromDir(dir, function(err, migrations) {
      var i, len, migration, migrationId, results;
      if (err) {
        return cb(err);
      }
      results = [];
      for (i = 0, len = migrationIds.length; i < len; i++) {
        migrationId = migrationIds[i];
        migration = null;
        if (migrationId.match(/^\d+$/)) {
          migration = _.find(migrations, {
            number: _.parseInt(migrationId)
          });
        }
        if (migration == null) {
          migration = _.find(migrations, {
            fullName: migrationId
          });
        }
        if (migration == null) {
          migration = _.find(migrations, {
            id: migrationId
          });
        }
        if (migration == null) {
          return cb(new Error("Can't find the migration " + migrationId));
        }
        results.push(migration.module);
      }
      return cb(null, results);
    });
  };

}).call(this);
