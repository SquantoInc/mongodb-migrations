// Generated by CoffeeScript 1.10.0
(function() {
  var MigrationsRunner, Migrator, _, defaultLog, loadMigrationsFromDir, migrationStub, ref, repeatString, slugify, writeFile,
    slice = [].slice;

  _ = require('lodash');

  ref = require('./utils'), repeatString = ref.repeatString, loadMigrationsFromDir = ref.loadMigrationsFromDir, slugify = ref.slugify, writeFile = ref.writeFile;

  migrationStub = require('./migration-stub');

  MigrationsRunner = require('./migrations-runner').MigrationsRunner;

  defaultLog = function() {
    var args, pad, src;
    src = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    pad = repeatString(' ', src === 'system' ? 4 : 2);
    return console.log.apply(console, [pad].concat(slice.call(args)));
  };

  Migrator = (function() {
    function Migrator(dbConfig, logFn) {
      this._m = [];
      this._migrateResult = null;
      if (logFn === void 0) {
        logFn = defaultLog;
      }
      this._runner = new MigrationsRunner(dbConfig, logFn);
    }

    Migrator.prototype.add = function(m) {
      return this._m.push(m);
    };

    Migrator.prototype.bulkAdd = function(array) {
      return this._m = this._m.concat(array);
    };

    Migrator.prototype.migrate = function(done, progress) {
      var _done;
      this._migrateResult = null;
      _done = (function(_this) {
        return function(err, result) {
          _this._migrateResult = result;
          return done(err, result);
        };
      })(this);
      this._runner.runUp(this._m, _done, progress);
    };

    Migrator.prototype.rollback = function(done, progress) {
      var migrations, result;
      result = this._migrateResult;
      if (!result) {
        return done(new Error('Rollback can only be ran after migrate'));
      }
      this._migrateResult = null;
      migrations = this._m.reverse().filter(function(m) {
        var ref1, status;
        return (status = (ref1 = result[m.id]) != null ? ref1.status : void 0) && status !== 'skip';
      });
      this._runner.runDown(migrations, done, progress);
    };

    Migrator.prototype.runFromDir = function(dir, done, progress) {
      return loadMigrationsFromDir(dir, (function(_this) {
        return function(err, files) {
          if (err) {
            return done(err);
          }
          _this.bulkAdd(_.map(files, 'module'));
          return _this.migrate(done, progress);
        };
      })(this));
    };

    Migrator.prototype.create = function(dir, id, done, coffeeScript) {
      if (coffeeScript == null) {
        coffeeScript = false;
      }
      return loadMigrationsFromDir(dir, function(err, files) {
        var body, ext, fileName, maxNum, nextNum, ref1, ref2, slug;
        if (err) {
          return done(err);
        }
        maxNum = (ref1 = (ref2 = _.maxBy(files, 'number')) != null ? ref2.number : void 0) != null ? ref1 : 0;
        nextNum = maxNum + 1;
        slug = slugify(id);
        ext = coffeeScript ? 'coffee' : 'js';
        fileName = nextNum + "-" + slug + "." + ext;
        body = migrationStub(id, coffeeScript);
        return writeFile(dir, fileName, body, done);
      });
    };

    Migrator.prototype.dispose = function(cb) {
      return this._runner.dispose(cb);
    };

    return Migrator;

  })();

  module.exports.Migrator = Migrator;

  module.exports.MigrationsRunner = MigrationsRunner;

}).call(this);
